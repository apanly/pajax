{"name":"Pajax","body":"## What is this?\r\n\r\nThis is a library to allow simple PHP objects to be made remotable in JavaScript, using XMLHttpRequest.\r\n\r\n## Introducing JSON\r\n\r\nAJAX technique usually implies using XML as a data exchange format. While suitable as a format to marshal parameters back and forth, there is another format that is much more suitable for JavaScript. <a href=\"http://www.crockford.com/JSON/index.html\" class=\"offsite\">JSON</a> (JavaScript Object Notation) is an alternate markup format that can be used to describe structured text data. It is based on the internal format used to store JavaScript Objects.\r\n\r\n## Object Request Broker pattern\r\n\r\nCORBA and RMI are two well known instances of the ORB (Object Request Broker) pattern. In this pattern, objects in a distributed environment need to call methods of remote objects. For remote call to work, many details must be just right. This pattern covers the aspect of building an infrastructure that hides all the complexity from the caller standpoint.\r\n\r\n<img src='http://cdn.auberger.com/images/objectrequestbrokerpattern.png' alt='Object Request Broker Design Pattern' />\r\n\r\n## Of caller, callee, stub and dispatcher\r\n\r\nPAJAX is just such a framework that hides the complexity involved in calling a method on a remote object. In this example, we're going to create a basic calculator in JavaScript where the operations are performed in a PHP class. Let's start with the PHP class for our calculator:\r\n\r\n```php\r\n<?\r\n class Calculator extends PajaxRemote {\r\n   function add($x, $y) {\r\n      return $x + $y;\r\n   }\r\n\r\n   function multiply($x, $y) {\r\n      return $x * $y;\r\n   }\r\n\r\n    ...\r\n}\r\n?>\r\n```\r\nThe class only needs to extend the base class PajaxRemote. This marker class is used to indicate that this class is remotable and thus, a stub can be created and an instance of this class can be created remotely.\r\n\r\nIn order to access this class within JavaScript, a stub class is required. It can be generated by including the following in the HTML file containing the JavaScript\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"pajax_import.php?Calculator\">\r\n</script>\r\n```\r\n\r\nThe resulting stub class can then be used like a regular JavaScript object. The framework automatically takes care of marshaling the parameters and performs the remote call.\r\n\r\n```javascript\r\nvar calculator = new Calculator();\r\nresult = calculator.add(2, 3);\r\n```\r\n\r\nBy default, the calls are performed synchronously. In most cases, it is not suitable to have the caller blocked while invoking methods on an object that lives across the network. This typically leads to a frozen UI and an overall unresponsive application.\r\n\r\n## Asynchronous Call\r\n\r\nWhen you invoke a method asynchronously, the call returns immediately. Most usefull methods will return some value, so you need a way to retrieve the returned value asynchronously. This is done by specifying a listener companion object for each remote object. Each method in the remote object has a corresponding method on the listener, prefixed with \"on\", that is automatically invoked upon completion of the remote call. Here is a diagram of the calling sequence:\r\n\r\n<img src='http://cdn.auberger.com/images/pajaxasynccall.png' alt='Pajax asynchronous call sequence diagram' />\r\n\r\n```javascript\r\nvar listener = new CalculatorListener();\r\nlistener.onAdd = function(ret) {\r\n  alert(\"Result:\" + ret);\r\n}\r\n\r\nvar calculator = new Calculator(listener);\r\n// Method will return immediatly\r\nresult = calculator.add(2, 3);\r\n```\r\n\r\n## Remote Object Binding\r\n\r\nIf your php object contains instance variables, you'd like to retain the same object between calls. PAJAX maintains a relationship with each instances of client object and their remote counterpart. It will lazily create a new object on the first call and bind subsequent calls to that particular object.\r\n\r\n## Demo\r\nTry a <a href=\"http://demo.auberger.com/pajax/\">live demo</a> of examples using PAJAX.\r\n\r\n## Documentation\r\n<a href=\"http://demo.auberger.com/pajax/doc/\">PAJAX documentation</a>\r\n\r\n## Get the source\r\nGet or fork <a href=\"https://github.com/georges/pajax\">pajax</a> on Github.\r\n\r\n## License\r\nPAJAX is licensed under the [MIT license](http://www.opensource.org/licenses/mit-license.php)\r\n\r\n> Fantastic library.\r\n\r\n> Was just testing out your pajax engine .. and boy is it nice and clean.\r\n\r\n> ... I think design vise you library is the best PHP version of AJAX for now.\r\n\r\n> Out of the many tool kits that I reviewed, many provided only part of the functionality that was needed.  Many others, had requirements beyond what was feasible.  Out of all that were reviewed, your Pajax tool kit was the only one that passed all the requirements. In addition, the code that makes up the toolkit is cleanly designed and is easily integrated into existing projects without a major rewrite of the code base.\r\n\r\n> I've started learning Ajax (and all that comes with it) recently, and have discovered your library - it's simply amazing. I love it.\r\n\r\n> ... gr8 work on the toolkit.</blockquote>\r\n\r\n","tagline":"Remote (a)synchronous PHP objects in JavaScript","google":"UA-1961119-1","note":"Don't delete this file! It's used internally to help with page regeneration."}